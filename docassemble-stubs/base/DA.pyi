from _typeshed import Incomplete as Incomplete

class Condition:
    leftside: Incomplete
    operator: Incomplete
    rightside: Incomplete
    def __init__(self, leftside, operator, rightside) -> None: ...
    def __and__(self, other) -> None: ...
    def __or__(self, other) -> None: ...
    def __rand__(self, other) -> None: ...
    def __ror__(self, other) -> None: ...
    def __invert__(self) -> None: ...

class Column:
    name: Incomplete
    def __init__(self, name) -> None: ...
    def __and__(self, other) -> None: ...
    def __xor__(self, other) -> None: ...
    def __or__(self, other) -> None: ...
    def __rand__(self, other) -> None: ...
    def __rxor__(self, other) -> None: ...
    def __ror__(self, other) -> None: ...
    def __invert__(self) -> None: ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __lt__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def Like(self, rightside) -> None: ...
    def In(self, *pargs) -> None: ...

class Group:
    items: Incomplete
    def __init__(self, *pargs, **kwargs) -> None: ...
    def __and__(self, other) -> None: ...
    def __or__(self, other) -> None: ...
    def __rand__(self, other) -> None: ...
    def __ror__(self, other) -> None: ...
    def __invert__(self) -> None: ...

class And(Group):
    group_type: str
    def __init__(self, *pargs, **kwargs) -> None: ...

class Or(Group):
    group_type: str
    def __init__(self, *pargs, **kwargs) -> None: ...

class Sessions:
    modtime: Incomplete
    filename: Incomplete
    session: Incomplete
    encrypted: Incomplete
    user_id: Incomplete
    email: Incomplete
    first_name: Incomplete
    last_name: Incomplete
    country: Incomplete
    subdivisionfirst: Incomplete
    subdivisionsecond: Incomplete
    subdivisionthird: Incomplete
    organization: Incomplete
    timezone: Incomplete
    language: Incomplete
    last_login: Incomplete
