from _typeshed import Incomplete as Incomplete

zerowidth: str
QPDF_PATH: str
NoneType: Incomplete
DEFAULT_PAGE_WIDTH: str
list_types: Incomplete

def image_for_docx(fileref, question, tpl, width: Union[Incomplete, None] = ...): ...
def transform_for_docx(text) -> None: ...
def create_hyperlink(url, anchor_text, tpl) -> None: ...

class InlineHyperlink:
    tpl: Incomplete
    url: Incomplete
    anchor_text: Incomplete
    def __init__(self, tpl, url, anchor_text) -> None: ...

def fix_subdoc(masterdoc, subdoc_info) -> None: ...
def include_docx_template(template_file, **kwargs) -> None: ...
def get_children(descendants, parsed) -> None: ...
def html_linear_parse(soup) -> None: ...
def Alpha(number) -> None: ...
def alpha(number) -> None: ...
def Roman_Numeral(number) -> None: ...
def roman_numeral(number) -> None: ...

class SoupParser:
    paragraphs: Incomplete
    current_paragraph: Incomplete
    run: Incomplete
    bold: bool
    center: bool
    list_number: int
    list_type: Incomplete
    italic: bool
    underline: bool
    strike: bool
    indentation: int
    style: str
    still_new: bool
    size: Incomplete
    charstyle: Incomplete
    color: Incomplete
    tpl: Incomplete
    def __init__(self, tpl) -> None: ...
    def new_paragraph(self, classes, styles) -> None: ...
    def set_attribs(self, classes, styles) -> None: ...
    def start_link(self, url) -> None: ...
    def end_link(self) -> None: ...
    def new_run(self) -> None: ...
    def traverse(self, elem) -> None: ...

class InlineSoupParser:
    runs: Incomplete
    run: Incomplete
    bold: bool
    italic: bool
    underline: bool
    indentation: int
    style: str
    strike: bool
    size: Incomplete
    charstyle: Incomplete
    color: Incomplete
    tpl: Incomplete
    at_start: bool
    list_number: int
    list_type: Incomplete
    def __init__(self, tpl) -> None: ...
    def new_paragraph(self) -> None: ...
    def start_link(self, url) -> None: ...
    def end_link(self) -> None: ...
    def new_run(self) -> None: ...
    def traverse(self, elem) -> None: ...

def inline_markdown_to_docx(text, question, tpl) -> None: ...
def markdown_to_docx(text, question, tpl) -> None: ...
def safe_pypdf_reader(filename) -> None: ...
def pdf_pages(file_info, width) -> None: ...
def concatenate_files(path_list) -> None: ...
def sanitize_xml(text) -> None: ...
