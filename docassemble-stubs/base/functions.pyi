import ast
import us as us
from _typeshed import Incomplete
from enum import Enum
from io import IOBase

FileType = IOBase

class RawValue:
    value: Incomplete
    def __init__(self, the_value) -> None: ...

def raw(val): ...

class ReturnValue:
    extra: Incomplete
    value: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __str__(self): ...

def get_chat_log(utc: bool = ..., timezone: Incomplete | None = ...): ...
def user_logged_in(): ...
def device(ip: bool = ...): ...
def language_from_browser(*pargs): ...
def country_name(country_code): ...
def language_name(language_code): ...
def subdivision_type(country_code): ...
def countries_list(): ...
def user_privileges(): ...
def user_has_privilege(*pargs): ...

class TheUser:
    def name(self): ...
    def __str__(self): ...

def user_info(): ...
def action_arguments(): ...
def action_argument(item: Incomplete | None = ...): ...
def location_returned(): ...
def location_known(): ...
def user_lat_lon(): ...
def chat_partners_available(*pargs, **kwargs): ...
def interview_email(key: Incomplete | None = ..., index: Incomplete | None = ...): ...
def get_emails(key: Incomplete | None = ..., index: Incomplete | None = ...): ...
def interview_url(**kwargs): ...

class DATagsSet:
    def add(self, item) -> None: ...
    def copy(self): ...
    def clear(self) -> None: ...
    def remove(self, elem) -> None: ...
    def discard(self, elem) -> None: ...
    def pop(self, *pargs): ...
    def __contains__(self, item) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __reversed__(self): ...
    def __and__(self, operand): ...
    def __or__(self, operand): ...
    def __iand__(self, operand): ...
    def __ior__(self, operand): ...
    def __isub__(self, operand): ...
    def __ixor__(self, operand): ...
    def __rand__(self, operand): ...
    def __ror__(self, operand): ...
    def __hash__(self): ...
    def __str__(self): ...
    def union(self, other_set): ...
    def intersection(self, other_set): ...
    def difference(self, other_set): ...
    def isdisjoint(self, other_set): ...
    def issubset(self, other_set): ...
    def issuperset(self, other_set): ...

def session_tags(): ...
def interview_url_action(action, **kwargs): ...
def interview_url_as_qr(**kwargs): ...
def interview_url_action_as_qr(action, **kwargs): ...
def get_info(att): ...
def get_current_info(): ...
def set_info(**kwargs) -> None: ...
def set_progress(number) -> None: ...
def get_progress(): ...
def update_terms(dictionary, auto: bool = ..., language: str = ...) -> None: ...
def set_save_status(status) -> None: ...

class DANav:
    past: Incomplete
    sections: Incomplete
    current: Incomplete
    progressive: bool
    hidden: bool
    disabled: bool
    def __init__(self) -> None: ...
    def __str__(self): ...
    def set_section(self, section): ...
    def section_ids(self, language: Incomplete | None = ...): ...
    def get_section(self, display: bool = ..., language: Incomplete | None = ...): ...
    def hide(self) -> None: ...
    def unhide(self) -> None: ...
    def disable(self) -> None: ...
    def enable(self) -> None: ...
    def visible(self, language: Incomplete | None = ...): ...
    def enabled(self): ...
    def set_sections(self, sections, language: Incomplete | None = ...) -> None: ...
    def get_sections(self, language: Incomplete | None = ...): ...
    def show_sections(self, style: str = ..., show_links: Incomplete | None = ...): ...

class WebFunc: ...

def write_record(key, data): ...
def read_records(key): ...
def delete_record(key, the_id): ...
def url_of(file_reference, **kwargs): ...
def server_capabilities(): ...

class GenericObject:
    user: Incomplete
    role: str
    def __init__(self) -> None: ...

def background_response(*pargs, **kwargs) -> None: ...
def background_response_action(*pargs, **kwargs) -> None: ...
def background_action(*pargs, **kwargs): ...

class BackgroundResult:
    def __init__(self, result) -> None: ...

class MyAsyncResult:
    _cached_result: Incomplete
    def wait(self): ...
    def failed(self): ...
    def ready(self): ...
    def result(self): ...
    def get(self): ...

def fix_punctuation(text, mark: Incomplete | None = ..., other_marks: Incomplete | None = ...): ...
def item_label(num, level: Incomplete | None = ..., punctuation: bool = ...): ...
def alpha(num, case: Incomplete | None = ...): ...
def roman(num, case: Incomplete | None = ...): ...

class LazyWord:
    original: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __mod__(self, other): ...
    def __str__(self): ...

class LazyArray:
    original: Incomplete
    def __init__(self, array) -> None: ...
    def compute(self): ...
    def copy(self): ...
    def pop(self, *pargs): ...
    def __add__(self, other): ...
    def index(self, *pargs, **kwargs): ...
    def clear(self) -> None: ...
    def append(self, other) -> None: ...
    def remove(self, other) -> None: ...
    def extend(self, other) -> None: ...
    def __contains__(self, item) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __delitem__(self, index) -> None: ...
    def __reversed__(self): ...
    def __setitem__(self, index, the_value): ...
    def __getitem__(self, index): ...
    def __str__(self): ...
    def __repr__(self): ...
    def __eq__(self, other): ...

def word(the_word, **kwargs): ...
def get_config(key, none_value: Incomplete | None = ...): ...
def get_default_timezone(): ...
def prevent_going_back() -> None: ...
def set_language(lang, dialect: Incomplete | None = ..., voice: Incomplete | None = ...) -> None: ...
def get_language(): ...
def set_country(country) -> None: ...
def get_country(): ...
def get_dialect(): ...
def set_locale(*pargs, **kwargs) -> None: ...
def get_locale(*pargs): ...
def need(*pargs): ...

verb_past: Incomplete
verb_present: Incomplete
noun_plural: Incomplete
noun_singular: Incomplete
indefinite_article: Incomplete
period_list: Incomplete
name_suffix: Incomplete
currency: Incomplete
currency_symbol: Incomplete
comma_list: Incomplete
comma_and_list: Incomplete
add_separators: Incomplete
nice_number: Incomplete
quantity_noun: Incomplete
capitalize: Incomplete
capitalize_function = capitalize
title_case: Incomplete
ordinal_number: Incomplete
ordinal: Incomplete

def space_to_underscore(a): ...
def message(*pargs, **kwargs) -> None: ...
def response(*pargs, **kwargs) -> None: ...
def json_response(data, response_code: Incomplete | None = ...) -> None: ...
def variables_as_json(include_internal: bool = ...) -> None: ...
def store_variables_snapshot(data: Incomplete | None = ..., include_internal: bool = ..., key: Incomplete | None = ..., persistent: bool = ...) -> None: ...
def all_variables(simplify: bool = ..., include_internal: bool = ..., special: bool = ..., make_copy: bool = ...): ...
def command(*pargs, **kwargs) -> None: ...
def force_ask(*pargs, **kwargs) -> None: ...
def static_image(filereference, width: Incomplete | None = ...): ...
def qr_code(string, width: Incomplete | None = ..., alt_text: Incomplete | None = ...): ...
def process_action() -> None: ...
def url_action(action, **kwargs): ...
def action_menu_item(label, action, **kwargs): ...
def from_b64_json(string): ...

class lister(ast.NodeVisitor):
    stack: Incomplete
    def __init__(self) -> None: ...
    def visit_Name(self, node) -> None: ...
    def visit_Attribute(self, node) -> None: ...
    def visit_Subscript(self, node) -> None: ...

def invalidate(*pargs) -> None: ...
def undefine(*pargs, invalidate: bool = ...) -> None: ...
def dispatch(var): ...
def set_variables(variables, process_objects: bool = ...) -> None: ...

class DefCaller(Enum):
    DEFINED: int
    VALUE: int
    SHOWIFDEF: int
    def is_pure(self) -> bool: ...
    def is_predicate(self) -> bool: ...

def value(var: str): ...
def defined(var: str) -> bool: ...
def single_paragraph(text): ...
def quote_paragraphs(text): ...
def set_live_help_status(availability: Incomplete | None = ..., mode: Incomplete | None = ..., partner_roles: Incomplete | None = ...) -> None: ...
def phone_number_in_e164(number, country: Incomplete | None = ...): ...
def phone_number_is_valid(number, country: Incomplete | None = ...): ...
def phone_number_part(number, part, country: Incomplete | None = ...): ...
def phone_number_formatted(number, country: Incomplete | None = ...): ...
def referring_url(default: Incomplete | None = ..., current: bool = ...): ...
def plain(text, default: Incomplete | None = ...): ...
def bold(text, default: Incomplete | None = ...): ...
def italic(text, default: Incomplete | None = ...): ...
def indent(text, by: Incomplete | None = ...): ...
def yesno(the_value, invert: bool = ...): ...
def noyes(the_value, invert: bool = ...): ...
def log(the_message, priority: str = ...) -> None: ...
def encode_name(var): ...
def decode_name(var): ...
def interview_list(exclude_invalid: bool = ..., action: Incomplete | None = ..., filename: Incomplete | None = ..., session: Incomplete | None = ..., user_id: Incomplete | None = ..., query: Incomplete | None = ..., include_dict: bool = ..., delete_shared: bool = ..., next_id: Incomplete | None = ...): ...
def interview_menu(*pargs, **kwargs): ...
def get_user_list(include_inactive: bool = ..., next_id: Incomplete | None = ...): ...
def manage_privileges(*pargs): ...
def get_user_info(user_id: Incomplete | None = ..., email: Incomplete | None = ...): ...
def set_user_info(**kwargs) -> None: ...
def create_user(email, password, privileges: Incomplete | None = ..., info: Incomplete | None = ...): ...
def get_user_secret(username, password): ...
def create_session(yaml_filename, secret: Incomplete | None = ..., url_args: Incomplete | None = ...): ...
def get_session_variables(yaml_filename, session_id, secret: Incomplete | None = ..., simplify: bool = ...): ...
def set_session_variables(yaml_filename, session_id, variables, secret: Incomplete | None = ..., question_name: Incomplete | None = ..., overwrite: bool = ..., process_objects: bool = ...) -> None: ...
def run_action_in_session(yaml_filename, session_id, action, arguments: Incomplete | None = ..., secret: Incomplete | None = ..., persistent: bool = ..., overwrite: bool = ...): ...
def get_question_data(yaml_filename, session_id, secret: Incomplete | None = ...): ...
def go_back_in_session(yaml_filename, session_id, secret: Incomplete | None = ...) -> None: ...
def redact(text): ...
def verbatim(text): ...

class DALocalFile:
    local_path: Incomplete
    def __init__(self, local_path) -> None: ...
    def path(self): ...
    def get_alt_text(self): ...
    alt_text: Incomplete
    def set_alt_text(self, alt_text) -> None: ...

def forget_result_of(*pargs) -> None: ...
def re_run_logic() -> None: ...
def reconsider(*pargs) -> None: ...
def single_to_double_newlines(text): ...

class CustomDataTypeRegister(type):
    def __init__(cls, name, bases, orig_clsdict) -> None: ...

class CustomDataType(metaclass=CustomDataTypeRegister):
    @classmethod
    def validate(cls, item): ...
    @classmethod
    def transform(cls, item): ...
    @classmethod
    def default_for(cls, item): ...
    @classmethod
    def empty(cls) -> None: ...

class ServerContext: ...
