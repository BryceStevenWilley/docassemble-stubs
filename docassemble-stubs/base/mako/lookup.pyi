from _typeshed import Incomplete as Incomplete

class TemplateCollection:
    def has_template(self, uri) -> None: ...
    def get_template(self, uri, relativeto: Union[Incomplete, None] = ...) -> None: ...
    def filename_to_uri(self, uri, filename) -> None: ...
    def adjust_uri(self, uri, filename) -> None: ...

class TemplateLookup(TemplateCollection):
    directories: Incomplete
    module_directory: Incomplete
    modulename_callable: Incomplete
    filesystem_checks: Incomplete
    collection_size: Incomplete
    template_args: Incomplete
    def __init__(self, directories: Union[Incomplete, None] = ..., module_directory: Union[Incomplete, None] = ..., filesystem_checks: bool = ..., collection_size: int = ..., format_exceptions: bool = ..., error_handler: Union[Incomplete, None] = ..., output_encoding: Union[Incomplete, None] = ..., encoding_errors: str = ..., cache_args: Union[Incomplete, None] = ..., cache_impl: str = ..., cache_enabled: bool = ..., cache_type: Union[Incomplete, None] = ..., cache_dir: Union[Incomplete, None] = ..., cache_url: Union[Incomplete, None] = ..., modulename_callable: Union[Incomplete, None] = ..., module_writer: Union[Incomplete, None] = ..., default_filters: Union[Incomplete, None] = ..., buffer_filters=..., strict_undefined: bool = ..., imports: Union[Incomplete, None] = ..., future_imports: Union[Incomplete, None] = ..., enable_loop: bool = ..., input_encoding: Union[Incomplete, None] = ..., preprocessor: Union[Incomplete, None] = ..., lexer_cls: Union[Incomplete, None] = ..., include_error_handler: Union[Incomplete, None] = ...) -> None: ...
    def get_template(self, uri) -> None: ...
    def adjust_uri(self, uri, relativeto) -> None: ...
    def filename_to_uri(self, filename) -> None: ...
    def put_string(self, uri, text) -> None: ...
    def put_template(self, uri, template) -> None: ...
