from _typeshed import Incomplete as Incomplete

QPDF_PATH: str
NoneType: Incomplete
zerowidth: str
DEFAULT_PAGE_WIDTH: str
term_start: Incomplete
term_match: Incomplete
noquote_match: Incomplete
lt_match: Incomplete
gt_match: Incomplete
amp_match: Incomplete
emoji_match: Incomplete
extension_match: Incomplete
map_match: Incomplete
code_match: Incomplete

def set_default_page_width(width) -> None: ...
def get_default_page_width() -> None: ...

DEFAULT_IMAGE_WIDTH: str

def set_default_image_width(width) -> None: ...
def get_default_image_width() -> None: ...

MAX_HEIGHT_POINTS: Incomplete

def set_max_height_points(points) -> None: ...
def get_max_height_points() -> None: ...

MAX_WIDTH_POINTS: Incomplete

def set_max_width_points(points) -> None: ...
def get_max_width_points() -> None: ...

rtf_spacing: Incomplete
rtf_after_space: Incomplete

def rtf_prefilter(text) -> None: ...
def repeat_along(chars, match) -> None: ...
def rtf_filter(text, metadata: Union[Incomplete, None] = ..., styles: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ...): ...
def docx_filter(text, metadata: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ...): ...
def docx_template_filter(text, question: Union[Incomplete, None] = ..., replace_newlines: bool = ...): ...
def metadata_filter(text, doc_format) -> None: ...
def redact_latex(match) -> None: ...
def pdf_filter(text, metadata: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ...): ...
def html_filter(text, status: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ..., embedder: Union[Incomplete, None] = ..., default_image_width: Union[Incomplete, None] = ..., external: bool = ...): ...
def clean_markdown_to_latex(string) -> None: ...
def map_string(encoded_text, status) -> None: ...
def target_html(match) -> None: ...
def pdf_two_col(match, add_line: bool = ...): ...
def html_caption(match) -> None: ...
def html_two_col(match) -> None: ...
def pdf_caption(match) -> None: ...
def add_newlines(string) -> None: ...
def border_pdf(match) -> None: ...
def flushleft_pdf(match) -> None: ...
def flushright_pdf(match) -> None: ...
def center_pdf(match) -> None: ...
def boldcenter_pdf(match) -> None: ...
def indentby_left_pdf(match) -> None: ...
def indentby_both_pdf(match) -> None: ...
def borderify(string) -> None: ...
def safe_pypdf_reader(filename) -> None: ...
def image_as_rtf(match, question: Union[Incomplete, None] = ...): ...
def qr_as_rtf(match) -> None: ...
def rtf_image(file_info, width, insert_page_breaks) -> None: ...

unit_multipliers: Incomplete

def convert_length(length, unit) -> None: ...
def pixels_in(length) -> None: ...
def image_url_string(match, emoji: bool = ..., question: Union[Incomplete, None] = ..., default_image_width: Union[Incomplete, None] = ..., external: bool = ..., status: Union[Incomplete, None] = ...): ...
def image_url(file_reference, alt_text, width, emoji: bool = ..., question: Union[Incomplete, None] = ..., external: bool = ..., status: Union[Incomplete, None] = ...): ...
def qr_url_string(match) -> None: ...
def convert_pixels(match) -> None: ...
def convert_percent(match) -> None: ...
def image_include_string(match, emoji: bool = ..., question: Union[Incomplete, None] = ...): ...
def image_include_docx(match, question: Union[Incomplete, None] = ...): ...
def qr_include_string(match) -> None: ...
def qr_include_docx(match) -> None: ...
def rtf_caption_table(match) -> None: ...
def rtf_two_col(match) -> None: ...
def emoji_html(text, status: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ..., images: Union[Incomplete, None] = ...): ...
def emoji_insert(text, status: Union[Incomplete, None] = ..., images: Union[Incomplete, None] = ...): ...
def link_rewriter(m, status) -> None: ...
def sub_term(m) -> None: ...
def markdown_to_html(a, trim: bool = ..., pclass: Union[Incomplete, None] = ..., status: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ..., use_pandoc: bool = ..., escape: bool = ..., do_terms: bool = ..., strip_newlines: Union[Incomplete, None] = ..., divclass: Union[Incomplete, None] = ..., embedder: Union[Incomplete, None] = ..., default_image_width: Union[Incomplete, None] = ..., external: bool = ..., verbatim: bool = ...): ...
def my_escape(result) -> None: ...
def noquote(string) -> None: ...
def add_terms_mako(termname, terms, status: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ...): ...
def add_terms(termname, terms, label: Union[Incomplete, None] = ..., status: Union[Incomplete, None] = ..., question: Union[Incomplete, None] = ...): ...
def audio_control(files, preload: str = ..., title_text: Union[Incomplete, None] = ...): ...
def video_control(files) -> None: ...
def get_audio_urls(the_audio, question: Union[Incomplete, None] = ...): ...
def get_video_urls(the_video, question: Union[Incomplete, None] = ...): ...
def process_target(text) -> None: ...
def to_text(html_doc, terms, links) -> None: ...

bad_list: Incomplete
good_list: Incomplete

def do_show(element) -> None: ...
def hidden(element) -> None: ...
def replace_fields(string, status: Union[Incomplete, None] = ..., embedder: Union[Incomplete, None] = ...): ...
def image_include_docx_template(match, question: Union[Incomplete, None] = ...): ...
def qr_include_docx_template(match) -> None: ...
def ensure_valid_filename(filename) -> None: ...
def convert_svg_to_eps(file_info) -> None: ...
def convert_svg_to_png(file_info) -> None: ...
