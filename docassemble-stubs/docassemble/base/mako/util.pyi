from _typeshed import Incomplete as Incomplete

def update_wrapper(decorated, fn) -> None: ...

class PluginLoader:
    group: Incomplete
    impls: Incomplete
    def __init__(self, group) -> None: ...
    def load(self, name) -> None: ...
    def register(self, name, modulepath, objname) -> None: ...

def verify_directory(dir_) -> None: ...
def to_list(x, default: Union[Incomplete, None] = ...): ...

class memoized_property:
    fget: Incomplete
    __doc__: Incomplete
    __name__: Incomplete
    def __init__(self, fget, doc: Union[Incomplete, None] = ...) -> None: ...
    def __get__(self, obj, cls) -> None: ...

class memoized_instancemethod:
    fget: Incomplete
    __doc__: Incomplete
    __name__: Incomplete
    def __init__(self, fget, doc: Union[Incomplete, None] = ...) -> None: ...
    def __get__(self, obj, cls) -> None: ...

class SetLikeDict(dict):
    def union(self, other) -> None: ...

class FastEncodingBuffer:
    data: Incomplete
    encoding: Incomplete
    delim: str
    errors: Incomplete
    write: Incomplete
    def __init__(self, encoding: Union[Incomplete, None] = ..., errors: str = ...) -> None: ...
    def truncate(self) -> None: ...
    def getvalue(self) -> None: ...

class LRUCache(dict):
    class _Item:
        key: Incomplete
        value: Incomplete
        timestamp: Incomplete
        def __init__(self, key, value) -> None: ...
    capacity: Incomplete
    threshold: Incomplete
    def __init__(self, capacity, threshold: float = ...) -> None: ...
    def __getitem__(self, key) -> None: ...
    def values(self) -> None: ...
    def setdefault(self, key, value) -> None: ...
    def __setitem__(self, key, value) -> None: ...

def parse_encoding(fp) -> None: ...
def sorted_dict_repr(d) -> None: ...
def restore__ast(_ast) -> None: ...
def read_file(path, mode: str = ...): ...
def read_python_file(path) -> None: ...
