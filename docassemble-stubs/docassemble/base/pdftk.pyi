import PyPDF2 as pypdf
from _typeshed import Incomplete as Incomplete

PDFTK_PATH: str
QPDF_PATH: str

def set_pdftk_path(path) -> None: ...
def set_qpdf_path(path) -> None: ...
def read_fields(pdffile) -> None: ...
def fieldsorter(x) -> None: ...
def recursively_add_fields(fields, id_to_page, outfields, prefix: str = ...) -> None: ...
def read_fields_pdftk(pdffile) -> None: ...

pdf_parts: Incomplete

def recursive_get_pages(indirect_obj, result) -> None: ...
def get_page_hash(obj) -> None: ...
def recursive_add_bookmark(reader, writer, outlines, parent: Union[Incomplete, None] = ...) -> None: ...
def safe_pypdf_reader(filename) -> None: ...
def fill_template(template, data_strings: Union[Incomplete, None] = ..., data_names: Union[Incomplete, None] = ..., hidden: Union[Incomplete, None] = ..., readonly: Union[Incomplete, None] = ..., images: Union[Incomplete, None] = ..., pdf_url: Union[Incomplete, None] = ..., editable: bool = ..., pdfa: bool = ..., password: Union[Incomplete, None] = ..., template_password: Union[Incomplete, None] = ..., default_export_value: Union[Incomplete, None] = ...): ...
def get_passwords(password) -> None: ...
def pdf_encrypt(filename, password) -> None: ...

class DAPdfFileWriter(pypdf.PdfFileWriter):
    def DAGetFields(self, tree: Union[Incomplete, None] = ..., results: Union[Incomplete, None] = ...): ...
    def DABuildField(self, f, results) -> None: ...
    def DACheckKids(self, tree, results) -> None: ...
    def addBookmark(self, title, pagenum, *args, parent: Union[Incomplete, None] = ..., color: Union[Incomplete, None] = ..., bold: bool = ..., italic: bool = ..., fit: str = ...): ...

def remove_nonprintable(text) -> None: ...
def remove_nonprintable_bytes(byte_list) -> None: ...
def remove_nonprintable_bytes_limited(byte_list) -> None: ...
def remove_nonprintable_limited(text) -> None: ...
def replicate_js_and_calculations(template_filename, original_filename, password) -> None: ...
def flatten_pdf(filename) -> None: ...
def overlay_pdf_multi(main_file, logo_file, out_file) -> None: ...
def overlay_pdf(main_file, logo_file, out_file, first_page: Union[Incomplete, None] = ..., last_page: Union[Incomplete, None] = ..., logo_page: Union[Incomplete, None] = ..., only: Union[Incomplete, None] = ...) -> None: ...
def apply_qpdf(filename) -> None: ...
def extract_pages(input_path, output_path, first, last) -> None: ...
